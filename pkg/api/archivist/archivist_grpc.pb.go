// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: archivist.proto

package archivist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchivistClient is the client API for Archivist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchivistClient interface {
	GetBySubjectDigest(ctx context.Context, in *GetBySubjectDigestRequest, opts ...grpc.CallOption) (Archivist_GetBySubjectDigestClient, error)
	GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...grpc.CallOption) (Archivist_GetSubjectsClient, error)
}

type archivistClient struct {
	cc grpc.ClientConnInterface
}

func NewArchivistClient(cc grpc.ClientConnInterface) ArchivistClient {
	return &archivistClient{cc}
}

func (c *archivistClient) GetBySubjectDigest(ctx context.Context, in *GetBySubjectDigestRequest, opts ...grpc.CallOption) (Archivist_GetBySubjectDigestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Archivist_ServiceDesc.Streams[0], "/archivist.Archivist/GetBySubjectDigest", opts...)
	if err != nil {
		return nil, err
	}
	x := &archivistGetBySubjectDigestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Archivist_GetBySubjectDigestClient interface {
	Recv() (*GetBySubjectDigestResponse, error)
	grpc.ClientStream
}

type archivistGetBySubjectDigestClient struct {
	grpc.ClientStream
}

func (x *archivistGetBySubjectDigestClient) Recv() (*GetBySubjectDigestResponse, error) {
	m := new(GetBySubjectDigestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *archivistClient) GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...grpc.CallOption) (Archivist_GetSubjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Archivist_ServiceDesc.Streams[1], "/archivist.Archivist/GetSubjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &archivistGetSubjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Archivist_GetSubjectsClient interface {
	Recv() (*GetSubjectsResponse, error)
	grpc.ClientStream
}

type archivistGetSubjectsClient struct {
	grpc.ClientStream
}

func (x *archivistGetSubjectsClient) Recv() (*GetSubjectsResponse, error) {
	m := new(GetSubjectsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArchivistServer is the server API for Archivist service.
// All implementations must embed UnimplementedArchivistServer
// for forward compatibility
type ArchivistServer interface {
	GetBySubjectDigest(*GetBySubjectDigestRequest, Archivist_GetBySubjectDigestServer) error
	GetSubjects(*GetSubjectsRequest, Archivist_GetSubjectsServer) error
	mustEmbedUnimplementedArchivistServer()
}

// UnimplementedArchivistServer must be embedded to have forward compatible implementations.
type UnimplementedArchivistServer struct {
}

func (UnimplementedArchivistServer) GetBySubjectDigest(*GetBySubjectDigestRequest, Archivist_GetBySubjectDigestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBySubjectDigest not implemented")
}
func (UnimplementedArchivistServer) GetSubjects(*GetSubjectsRequest, Archivist_GetSubjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubjects not implemented")
}
func (UnimplementedArchivistServer) mustEmbedUnimplementedArchivistServer() {}

// UnsafeArchivistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchivistServer will
// result in compilation errors.
type UnsafeArchivistServer interface {
	mustEmbedUnimplementedArchivistServer()
}

func RegisterArchivistServer(s grpc.ServiceRegistrar, srv ArchivistServer) {
	s.RegisterService(&Archivist_ServiceDesc, srv)
}

func _Archivist_GetBySubjectDigest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBySubjectDigestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArchivistServer).GetBySubjectDigest(m, &archivistGetBySubjectDigestServer{stream})
}

type Archivist_GetBySubjectDigestServer interface {
	Send(*GetBySubjectDigestResponse) error
	grpc.ServerStream
}

type archivistGetBySubjectDigestServer struct {
	grpc.ServerStream
}

func (x *archivistGetBySubjectDigestServer) Send(m *GetBySubjectDigestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Archivist_GetSubjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArchivistServer).GetSubjects(m, &archivistGetSubjectsServer{stream})
}

type Archivist_GetSubjectsServer interface {
	Send(*GetSubjectsResponse) error
	grpc.ServerStream
}

type archivistGetSubjectsServer struct {
	grpc.ServerStream
}

func (x *archivistGetSubjectsServer) Send(m *GetSubjectsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Archivist_ServiceDesc is the grpc.ServiceDesc for Archivist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Archivist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivist.Archivist",
	HandlerType: (*ArchivistServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBySubjectDigest",
			Handler:       _Archivist_GetBySubjectDigest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSubjects",
			Handler:       _Archivist_GetSubjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "archivist.proto",
}

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (Collector_StoreClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Collector_GetClient, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Store(ctx context.Context, opts ...grpc.CallOption) (Collector_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], "/archivist.Collector/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorStoreClient{stream}
	return x, nil
}

type Collector_StoreClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*StoreResponse, error)
	grpc.ClientStream
}

type collectorStoreClient struct {
	grpc.ClientStream
}

func (x *collectorStoreClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorStoreClient) CloseAndRecv() (*StoreResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Collector_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[1], "/archivist.Collector/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_GetClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type collectorGetClient struct {
	grpc.ClientStream
}

func (x *collectorGetClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	Store(Collector_StoreServer) error
	Get(*GetRequest, Collector_GetServer) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) Store(Collector_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedCollectorServer) Get(*GetRequest, Collector_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).Store(&collectorStoreServer{stream})
}

type Collector_StoreServer interface {
	SendAndClose(*StoreResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type collectorStoreServer struct {
	grpc.ServerStream
}

func (x *collectorStoreServer) SendAndClose(m *StoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorStoreServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Collector_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).Get(m, &collectorGetServer{stream})
}

type Collector_GetServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type collectorGetServer struct {
	grpc.ServerStream
}

func (x *collectorGetServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivist.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _Collector_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Collector_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "archivist.proto",
}
